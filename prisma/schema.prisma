generator client {
  provider = "prisma-client-js"
} 

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//
// Represents a single post on the forum.
//
model Post {
  id        String  @id @default(cuid())
  title     String
  body   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId String?
  likes     Int
}


//
// Represents a user of the aviquo platform
//
model User {
  id           String    @id @unique
  auth_session Session[]
  key          Key[]
  firstName    String   
  lastName     String  
  email        String   @unique
  username     String   @unique
  pfp          String?
  bio          String?
  numFollowers Int      
  numFollowing Int      
  createdAt    DateTime @default(now()) @map(name: "date_joined")
  posts        Post[]

  @@map(name: "users")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

//
// Global list of tags/keywords applicable to opportunities.
//
// Examples: scholarship, extracurricular activity, etc.
//
model Tag {
  name            String       @unique @db.VarChar(50)
  Opportunity     Opportunity? @relation(fields: [opportunityName], references: [name])
  opportunityName String?      @db.VarChar(200)
}

model Category {
  name String @unique @db.VarChar(255)
}

model Opportunity {
  name          String @unique @db.VarChar(200)
  profile_image String
  url           String
  description   String
  tags          Tag[]
}

model Waitlist {
  email     String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Forum {
  // user        User     @relation(fields: [userId], references: [id])
  id          String   @id @default(cuid())
  topic       String   @unique @db.VarChar(300)
  description String? //max_length:1000
  createdAt   DateTime @default(now()) @map(name: "created_at")
  userId      String
}